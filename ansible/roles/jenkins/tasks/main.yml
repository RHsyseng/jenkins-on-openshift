---
- name: Check if {{ registry_api_secret_name }} exists
  command: "{{ oc }} get secret {{ registry_api_secret_name }}"
  when: registry_api_secret_name is defined
  register: registry_api_secret_exists
  ignore_errors: true

- name: Check if {{ stage_api_secret_name }} exists
  command: "{{ oc }} get secret {{ stage_api_secret_name }}"
  when: stage_api_secret_name is defined
  register: stage_api_secret_exists
  ignore_errors: true

- name: Check if {{ prod_api_secret_name }} exists
  command: "{{ oc }} get secret {{ prod_api_secret_name }}"
  when: prod_api_secret_name is defined
  register: prod_api_secret_exists
  ignore_errors: true

- name: Create secret {{ registry_api_secret_name }}
  command: "{{ oc }} secret new-basicauth {{ registry_api_secret_name }} --password {{ hostvars['registry-1']['jenkinstoken'] }}"
  when:
    - registry_api_secret_exists|failed
    - hostvars['registry-1']['jenkinstoken'] is defined

- name: Create secret {{ stage_api_secret_name }}
  command: "{{ oc }} secret new-basicauth {{ stage_api_secret_name }} --password {{ hostvars['stage-1']['jenkinstoken'] }}"
  when:
    - stage_api_secret_exists|failed
    - hostvars['stage-1']['jenkinstoken'] is defined

- name: Create secret {{ prod_api_secret_name }}
  command: "{{ oc }} secret new-basicauth {{ prod_api_secret_name }} --password {{ hostvars['prod-1']['jenkinstoken'] }}"
  when:
    - prod_api_secret_exists|failed
    - hostvars['prod-1']['jenkinstoken'] is defined

- name: Create custom Jenkins source-to-image build
  shell: >-
    {{ oc }} process -f {{ role_path }}/files/jenkins-custom-build.yaml
    --param SOURCE_REPOSITORY_URL={{ source_repo_url }}
    --param SOURCE_REPOSITORY_REF={{ source_repo_branch }}
    | {{ oc }} apply --force=true -f -

- name: Create Jenkins app
  shell: >-
    {{ oc }} process -f {{ role_path }}/files/jenkins-master.yaml
    --param NAMESPACE={{ project_name }}
    --param MEMORY_LIMIT=2Gi
    --param JENKINS_IMAGE_STREAM_TAG=jenkins-custom:latest
    | {{ oc }} apply -f -

- name: Create application pipeline
  shell: >-
    {{ oc }} process -f {{ role_path }}/files/app-pipeline.yaml
    -p SOURCE_REPOSITORY_URL={{ source_repo_url }}
    -p SOURCE_REPOSITORY_REF={{ source_repo_branch }}
    -p IMAGE_STREAM_NAME={{ imagestream_name }}
    -p IMAGE_STREAM_LATEST_TAG={{ imagestream_latest_tag }}
    -p APP_DC_NAME={{ app_name }}
    -p APP_TEMPLATE_PATH={{ app_template_path }}
    -p REGISTRY_URI={{ central_registry_hostname }}
    -p DEV_URI={{ openshift_protocol }}://{{ hostvars['dev-1']['clusterhost'] }}
    -p STAGE_URI={{ openshift_protocol }}://{{ hostvars['stage-1']['clusterhost'] }}
    -p DEV_PROJECT={{ hostvars['dev-1']['project_name'] }}
    -p STAGE_PROJECT={{ hostvars['stage-1']['project_name'] }}
    -p REGISTRY_PROJECT={{ hostvars['registry-1']['project_name'] }}
    -p STAGE_SECRET_NAME={{ stage_api_secret_name }}
    | {{ oc }} apply --force=true -f -

- name: Create release pipeline
  shell: >-
    {{ oc }} process -f {{ role_path }}/files/release-pipeline.yaml
    -p SOURCE_REPOSITORY_URL={{ source_repo_url }}
    -p SOURCE_REPOSITORY_REF={{ source_repo_branch }}
    -p IMAGE_STREAM_NAME={{ imagestream_name }}
    -p APP_DC_NAME={{ app_name }}
    -p APP_TEMPLATE_PATH={{ app_template_path }}
    -p REGISTRY_URI={{ central_registry_hostname }}
    -p OPENSHIFT_REGISTRY_URI={{ openshift_protocol }}://{{ hostvars['registry-1']['clusterhost'] }}
    -p PROD_URI={{ openshift_protocol }}://{{ hostvars['prod-1']['clusterhost'] }}
    -p PROD_PROJECT={{ hostvars['prod-1']['project_name'] }}
    -p REGISTRY_PROJECT={{ hostvars['registry-1']['project_name'] }}
    -p PROD_SECRET_NAME={{ prod_api_secret_name }}
    -p REGISTRY_SECRET_NAME={{ registry_api_secret_name }}
    -p NOTIFY_EMAIL_LIST={{ notify_email_list }}
    -p NOTIFY_EMAIL_FROM={{ notify_email_from }}
    -p NOTIFY_EMAIL_REPLYTO={{ notify_email_replyto }}
    | {{ oc }} apply --force=true -f - -n {{ project_name }}

- name: Create Jenkins master pipeline
  shell: >-
    {{ oc }} process -f {{ role_path }}/files/jenkins-pipeline.yaml
    -p SOURCE_REPOSITORY_URL={{ source_repo_url }}
    -p SOURCE_REPOSITORY_REF={{ source_repo_branch }}
    | {{ oc }} apply --force=true -f -

- name: Create Jenkins base image pipeline
  # Most of the defaults in the template are already set to match Jenkins
  shell: >-
    {{ oc }} process -f {{ role_path }}/files/base-image-pipeline.yaml
    -p APP_NAMESPACE={{ project_name }}
    -p NOTIFY_EMAIL_LIST={{ notify_email_list }}
    -p NOTIFY_EMAIL_FROM={{ notify_email_from }}
    -p NOTIFY_EMAIL_REPLYTO={{ notify_email_replyto }}
    | {{ oc }} apply --force=true -f -

- name: Create application base image pipeline
  # Using the same template but changing some parmeters to match the app
  shell: >-
    {{ oc }} process -f {{ role_path }}/files/base-image-pipeline.yaml
    -p APP_BC={{ app_name }}
    -p APP_NAME={{ app_name }}
    -p BASE_IMAGE_TAG={{ app_base_tag }}
    -p APP_PIPELINE={{ project_name}}-{{ app_name }}
    -p APP_NAMESPACE={{ project_name }}
    -p NOTIFY_EMAIL_LIST={{ notify_email_list }}
    -p NOTIFY_EMAIL_FROM={{ notify_email_from }}
    -p NOTIFY_EMAIL_REPLYTO={{ notify_email_replyto }}
    | {{ oc }} apply --force=true -f -

- name: Get last jenkins-custom build number
  command: "{{ oc }} get bc jenkins-custom --template '{{ '{{' }} .status.lastVersion {{ '}}' }}'"
  register: jenkins_custom_build_number

- name: Get last jenkins-custom build status
  command: "{{ oc }} get build jenkins-custom-{{ jenkins_custom_build_number.stdout }} --template '{{ '{{' }} .status.phase {{ '}}' }}'"
  register: jenkins_custom_build_status
  ignore_errors: true

- name: Start jenkins-custom build
  command: "{{ oc }} start-build jenkins-custom"
  when: jenkins_custom_build_status.stdout != 'Running'
  ignore_errors: true
